##
## Program1.asm - prints out "hello world"
##
##	a0 - points to the string
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start 

__start:		# execution starts here
	sw 4, 0($t0)
	la $a0,str	# put string address into a0
	li $v0,4	# system call to print
	syscall		#   out a string

	li $v0,10  # system call to exit
	syscall	#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
str:	.asciiz "0123hello world\n"
n:	.word	10

##
## end of file Program1.asm

--------------------------------------------------------------------------------------------------------------------------------------

##
## Program2.asm asks user for temperature in Celsius,
##  converts to Fahrenheit, prints the result.
##
##	v0 - reads in Celsius
##	t0 - holds Fahrenheit result
##	a0 - points to output strings
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start	

__start:
	la $a0,prompt	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	mul $t0,$v0,9	# to convert,multiply by 9,
	div $t0,$t0,5	# divide by 5, then
	add $t0,$t0,32	# add 32

	la $a0,ans1	# print string before result
	li $v0,4
	syscall

	move $a0,$t0	# print integer result
	li $v0,1		# using syscall 1
	syscall

	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall

	li $v0,10		# system call to exit
	syscall		#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
prompt:	.asciiz "Enter temperature (Celsius): "
ans1:	.asciiz "The temperature in Fahrenheit is "
endl:	.asciiz "\n"

##
## end of file Program2.asm

-------------------------------------------------------------------------------------------------------------------

##
##	Program3.asm is a loop implementation
##	of the Fibonacci function
##        

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
.globl __start
 
__start:		# execution starts here
	li $a0,8	# to calculate fib(7)
	jal fib		# call fib
	move $a0,$v0	# print result
	li $v0, 1
	syscall

	la $a0,endl	# print newline
	li $v0,4
	syscall

	li $v0,10
	syscall		# bye bye

#------------------------------------------------


fib:	move $v0,$a0	# initialise last element
	blt $a0,2,done	# fib(0)=0, fib(1)=1

	li $t0,0	# second last element
	li $v0,1	# last element

loop:	add $t1,$t0,$v0	# get next value
	move $t0,$v0	# update second last
	move $v0,$t1	# update last element
	subi $a0,$a0,1	# decrement count
	bgt $a0,1,loop	# exit loop when count=0
done:	jr $ra

#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
endl:	.asciiz "\n"

##
## end of Program3.asm

----------------------------------------------------------------------------------------------------------------------

	# $t7 ---> selection
	.text
__start:
	# getting size of the array
	li $v0, 4
	la $a0, sizeMessage
	syscall
	
	li $v0, 5 
	syscall
	sw $v0, size
	
	# getting elements
	lw $t0, size # t0 --> size
	la $t1, array # t1 --> first index
	add $t2, $0, $0
	
	li $v0, 4
	la $a0, arrayMessage
	syscall
	
	elements:
		li $v0, 5
		syscall
		sw $v0, 0($t1)
		addi $t2, $t2, 1 # t2 --> current size
		addi $t1, $t1, 4
		blt $t2, $t0, elements
	la $t1, array
	
	
	jal select
	
	##### burada kaldÄ±m
	

option1:
	addi $t4, $0, 0
	
	li $v0, 4
	la $a0, option1Message
	syscall
	
	li $v0, 5 
	syscall
	sw $v0, input
	
	lw $t6, input # t6 --> input
	
	la $t1, array
	addi $t2, $0, 0
	count:
		lw $t5, 0($t1) # t5 --> array[i]
		bgt $t5, $t6, increment
		ble $t5, $t6, skip
		increment:
			add $t4, $t4, $t5 # t4 ---> summation
		skip:
			
		addi $t2, $t2, 1
		addi $t1, $t1, 4
		blt $t2, $t0, count
		
	# printing result
	li $v0, 4
	la $a0, option1Message2
	syscall
	
	sw $t4, option1Result
	lw $a0, option1Result
	
	li $v0, 1
	syscall
	
	li $v0, 4
	la $a0, newLine
	syscall
	
	jal select
option2:	
	addi $t3, $0, 0 # t3 --> odd numbers
	addi $t4, $0, 0 # t4 --> even numbers
	
	la $t1, array # t1 --> first index
	addi $t2, $0, 0
	addi $t6, $0, 2 
	addi $t8, $0, 1
	addi $t9, $0, -1
	funct:
		bge $t2, $t0, cont
		lw $t5, 0($t1)
		div $t5, $t6
		mfhi $t7 # remainder from 2
		beq $t7, $0, even
		beq $t7, $t8, odd
		beq $t7, $t9, odd
		blt $t2, $t0, funct
cont:	
	# printing summation of odd numbers 
	li $v0, 4
	la $a0, oddMessage
	syscall
	
	move $a0, $t3
	li $v0, 1
	syscall
	
	li $v0, 4
	la $a0, newLine
	syscall
	
	# printing summation of even numbers
	li $v0, 4
	la $a0, evenMessage
	syscall
	
	move $a0, $t4
	li $v0, 1
	syscall
	
	li $v0, 4
	la $a0, newLine
	syscall
	
	jal select
	
even:
	add $t4, $t4, $t5
	addi $t1, $t1, 4
	addi $t2, $t2, 1
	j funct
odd:
	add $t3, $t3, $t5
	addi $t1, $t1, 4
	addi $t2, $t2, 1
	j funct
option3:	

	addi $t7, $0, 0 # t5 --> no of occurrences
	
	li $v0, 4
	la $a0, option1Message
	syscall
	
	li $v0, 5 
	syscall
	sw $v0, input
	
	lw $t6, input
	la $t1, array
	addi $t2, $0, 0
	
	divCount:
		bge $t2, $t0, resume
		lw $t5, 0($t1) # t5 --> array[i]
		div $t5, $t6
		mfhi $t8 # t8 --> remainder
		addi $t1, $t1, 4
		addi $t2, $t2, 1
		beq $t8, 0, inc
		bne $t8, 0, divCount
resume:
	# printing the result
	li $v0, 4
	la $a0, option4Message
	syscall
	
	move $a0, $t7
	li $v0, 1
	syscall
	
	li $v0, 4
	la $a0, newLine
	syscall
	
	jal select

inc:
	addi $t7, $t7, 1
	j divCount

option4:
	li $v0, 10
	syscall
	
select:
	li $v0, 4
	la $a0, aMessage
	syscall
	
	la $a0, bMessage
	syscall
	
	la $a0, cMessage
	syscall
	
	la $a0, dMessage
	syscall
	
	li $v0, 5 
	syscall
	sw $v0, selection
	
	lw $t7, selection
	
	beq $t7, 1, option1
	beq $t7, 2, option2
	beq $t7, 3, option3
	beq $t7, 4, option4
	
	jr $ra
	
	.data
aMessage: .asciiz "1- Find summation of numbers stored in the array which is greater than an input number.\n"
bMessage: .asciiz "2- Find summation of even and odd numbers and display them.\n"
cMessage: .asciiz "3- Display the number of occurrences of the array elements divisible by a certain input number.\n"
dMessage: .asciiz "4- Quit.\n"
sizeMessage: .asciiz "Enter the size of the array:\n"
arrayMessage: .asciiz "Enter the values of the array.\n"
option1Message: .asciiz "Enter a value:\n"
option1Message2: .asciiz "Summation: "
oddMessage: .asciiz "Summation of odd numbers: "
evenMessage: .asciiz "Summation of even numbers: "
option4Message: .asciiz "Number of occurrences of the array elements divisible by a certain input number: "
newLine: .asciiz "\n"
option1Result: .word 0
selection: .word 0
array: .space 400
size: .word 0
input: .word 0

------------------------------------------------------------------------------------------------------------------------------------------------

	.text
__start:
	# wants to a value from the user
	li $v0, 4
	la $a0, aMessage
	syscall
	
	li $v0, 5
	syscall
	sw $v0, a
	
	# wants to b value from the user
	li $v0, 4
	la $a0, bMessage
	syscall
	
	li $v0, 5
	syscall
	sw $v0, bb
	
	lw $t0, a # t0 --> value of a
	lw $t1, bb # t1 --> value of b
	
	div $t0, $t1
	mfhi $t2 # t2 --> a%b
	
	sub $t3, $t0, $t1 # t3 --> a-b
	
	mul $t4, $t2, $t3
	
	sw $t4, x
	
	# prints x value
	li $v0, 4
	la $a0, xMessage
	syscall
	
	li $v0, 1
	lw $a0, x
	syscall
	
	# end the program
	li $v0, 10	
	syscall
	
	.data
a: .word 0
bb: .word 0
x: .word 0
aMessage: .asciiz "Enter a value: "
bMessage: .asciiz "Enter b value: "
xMessage: .asciiz "Value of x is: "
